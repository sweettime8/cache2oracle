(Do|do|DO)\s+((\w+)\^(\w+)\(([^)]*\)))|||\4_MAC.\3(\5
Do\s+([^\s(]+)(?=\s|$)|||\1()
(Do\s+(\w+))(\s+|\([^)]*\))|||\2\3
Do\s*\{([\s\S]*?)\}\s*While\s*\(([^)]+)\)|||LOOP\1IF \2 THEN\n  GOTO \2 \nENDIF;\n  <<\2>>\n  IF NOT \2 THEN\n\n  EXIT;\n  ENDIF;\nEND LOOP;
If\s*\(([^)]+)\)\s*\{\s*([\s\S]*?)\}\s*ElseIf\s*\(([^)]+)\)\s*\{\s*([\s\S]*?)\}\s*Else\s*\{\s*([\s\S]*?)\}|||IF \1 THEN \n \2 \nELSIF \3 THEN \n \4 \nELSE \n \5 \nEND IF;\n
(If|if|IF)\s*([^{]+)\s*\{([^{]+)\}\s*(else|ELSE)\{([^}]+)\}|||IF \2 THEN\n\t   \3\n\tELSE\n\t   \5\n\tEND IF;\n
If\s*\(([^)]+)\)\s*\{\s*([\s\S]*?)\}\s*ElseIf\s*\(([^)]+)\)\s*\{\s*([\s\S]*?)\}|||IF (\1) THEN \n \2 \nELSIF (\3) THEN \n \4 \nEND IF;\n
If\s*\(?([^)]+)\)\)?\s*([^{]+)\{\s*([\s\S]*?)\}\s*(Else|else)\s*\{\s*([\s\S]*?)\}|||\tIF \1 = \2 THEN \n\t  \3 \n\tELSE \n\t   \5 \n   END IF;\n
If\s*\(?([^)]+)\)?\s*\{\s*([\s\S]*?)\}\s*Else\s*\{\s*([\s\S]*?)\}|||IF \1 THEN \n \2 \nELSE \n \3 \nEND IF;\n
If\s*\(([^)]+)\)\s*\{([\s\S]*?)\}|||IF \1 THEN \n   \2 \n    END IF;\n
if\s*\(([^)]+)\)\s*\{([\s\S]*?)\}|||IF \1 THEN \n   \2 \n    END IF;\n
If\s*([^{}]+)\s*\{([\s\S]*?)\}|||IF \1 THEN \n   \2 \n    END IF;\n
(If|if|IF)\s*([^\n]+)(Quit|quit)\s*([^\n]+)|||IF \2 THEN \n\t    RETURN \4; \n\tEND IF;\n
(If|if|IF)\s*\(([^{]+)\{([^}]+)\}|||IF (\2 THEN \n\t    \3; \n\tEND IF;\n
(If|if|IF)\s*([^=]+)\=\s*\"\"\s*(Quit)\s+(\w+)|||IF \2 IS NULL THEN \n\t   RETURN \4; \n\tEND IF;\n
While \((.*?)\) {([\s\S]*?)}|||WHILE \1 \nLOOP\n  \2 \nEND LOOP;
Kill @\$\$\$(.*?)\@\(([^)]+)\)|||TABLE_NAME_REPO.DELETE(\2)
Kill \^([^\s(]+)\(([^)]+)|||TABLE_NAME_REPO.DELETE(\2
Kill \@\"\^([^)]+)\(([^)]+)|||TABLE_NAME_REPO.DELETE(\2
Kill \^([^\s(]+)(?=\s|$)|||TABLE_NAME_REPO.DELETE()
\@\"\^([^)]+)\(([^)]+)|||TABLE_NAME_REPO.FIND_BY_KEY(\2
\^([^\s(]+)\(([^)]+)|||TABLE_NAME_REPO.FIND_BY_KEY(\2
TSTART\s*([\s\S]*?)\s*TCOMMIT|||\1\nCOMMIT;
TCOMMIT|||COMMIT;
(For|for|FOR)\s*(\w+)\s*\=(\w+)\:(\w+)\:(\w+)\s*\{([\s\S]*?)\}|||FOR \2 IN \3 .. \5 LOOP \n\t   \6\n\tEND LOOP;
For \{([\s\S]*?)\}|||LOOP\n  \1 \nEND LOOP;
Try \{([\s\S]*?)\} Catch\s+Exception \{([\s\S]*?)\}|||BEGIN\n  \1 \nEXCEPTION\n  WHEN OTHERS THEN\n   \2 \nEND;
\$\$([A-Za-z0-9]+)\^([A-Za-z0-9]+)\(([^)]+)\)|||\2_MAC.\1(\3);
\@\$\$\$([^\s(]+)\@\(([^)]+)|||TABLE_NAME_REPO.FIND_BY_KEY(\2
\$\$([^\s(]+)\(([^)]+)|||\1(\2
\$\$\$OK|||1
Quit:\(([^)]+)\)|||IF (\1) THEN\n\n    EXIT;\n\nEND IF;\n
Quit\s+(\w+)|||RETURN \1;\n
Quit\s+\-(\w+)|||RETURN -1;\n
(\$HOROLOG)|||COMMON.C_HOROLOG
(\$C)\(([^)]+)\)|||COMMON.C_CHAR(\2)
(\$Char)\(([^)]+)\)|||COMMON.C_CHAR(\2)
\$LISTBUILD\(([^)]+)\)|||STRING_ARRAY(\1)
\$ListBuild\(([^)]+)\)|||STRING_ARRAY(\1)
\$LB\(([^)]+)\)|||STRING_ARRAY(\1)
(\d+)\s*#\s*(\d+)|||MOD(\1,\2)
(\d+)\s*\\\s*(\d+)|||TRUNC(\1/\2)
(Set|SET|set)\s+(\w+)\s*=\s*(.*) |||\2 := \3;
(Set|SET|set)\s+(\w+)\((\d+)\)\s*=\s*(.*)|||\2(\3) := \4
(Set|SET|set) \$BIT\(([^)]+)\)\s*=\s*(.+)|||COMMON.C_BIT(\2, \3);
(Set|SET|set)\s+\$Extract\(([^)]+)\)\s*=\s*(.+)|||COMMON.C_EXTRACT(\2, \3);
(Set|SET|set)\s+\$PIECE\(([^)]+)\)\s*=\s*(.+)|||COMMON.C_PIECE(\2, \3);
'=\s*""|||IS NOT NULL
'=\s+|||!=
([^:])=\s*""|||\1IS NULL
(\|\|)||| OR
(\&\&)||| AND
=\s*\"([^"]+)\"|||'\1'
\"\"|||''
\$ListGet\(([^)]+)\)|||COMMON.C_LISTGET(\1)
\$LG\(([^)]+)\)|||COMMON.C_LISTGET(\1)
\$ISVALIDNUM\(([^)]+)\)|||COMMON.C_ISVALIDNUM(\1)
\$JUSTIFY\(([^)]+)\)|||COMMON.C_JUSTIFY(\1)
\$J\(([^)]+)\)|||COMMON.C_JUSTIFY(\1)
\$LISTFROMSTRING\(([^)]+)\)|||COMMON.C_LISTFROMSTRING(\1)
\$LFS\(([^)]+)\)|||COMMON.C_LISTFROMSTRING(\1)
\$LISTLENGTH\(([^)]+)\)|||COMMON.C_LISTLENGTH(\1)
\$LL\(([^)]+)\)|||COMMON.C_LISTLENGTH(\1)
\$NORMALIZE\(([^)]+)\)|||COMMON.C_NORMALIZE(\1)
\$RANDOM\(([^)]+)\)|||COMMON.C_RANDOM(\1)
\$REPLACE\(([^)]+)\)|||COMMON.C_REPLACE(\1)
\$REVERSE\(([^)]+)\)|||COMMON.C_REVERSE(\1)
\$(TRANSLATE|Translate|translate)\(([^)]+)\)|||COMMON.C_TRANSLATE(\2)
\$ZABS\(([^)]+)\)|||COMMON.C_ZABS(\1)
\$Get\(([^)]+)\)|||COMMON.C_GET(\1)
\$LENGTH\(([^)]+)\)|||COMMON.C_LENGTH(\1)
\$ZDATETIME\(([^)]+)\)|||COMMON.C_ZDATETIME(\1)
\$ZDT\(([^)]+)\)|||COMMON.C_ZDATETIME(\1)
\$ZDATETIMEH\(([^)]+)\)|||COMMON.C_DATETIMEH(\1)
\$ZCONVERT\(([^)]+)\)|||COMMON.C_ZCONVERT(\1)
\$ZCVT\(([^)]+)\)|||COMMON.C_ZCONVERT(\1)
\$(ZDATEH|ZDateH|zdateh)\(([^)]+)\)|||COMMON.C_DATEH(\2)
\$ZDH\(([^)]+)\)|||COMMON.C_DATEH(\1)
\$ZDATE\(([^)]+)\)|||COMMON.C_DATE(\1)
\$ZPOWER\(([^)]+)\)|||COMMON.C_ZPOWER(\1)
\$ZWIDTH\(([^)]+)\)|||COMMON.C_ZWIDTH(\1)
\$ZZENKAKU\(([^)]+)\)|||COMMON.C_ZZENKAKU(\1)
\$ZUTIL\(([^)]+)\)|||COMMON.C_ZUTIL(\1)
\$ZTIMESTAMP|||COMMON.C_ZTIMESTAMP
\$LIST\(([^)]+)\)|||COMMON.C_LIST(\1)
\$NUMBER\(([^)]+)\)|||COMMON.C_NUMBER(\1)
\$EXTRACT\(([^)]+)\)|||COMMON.C_EXTRACT(\1)
\$E\(([^)]+)\)|||COMMON.C_EXTRACT(\1)
\$DATA\(([^)]+)\)|||COMMON.C_DATA(\1)
\$D\(([^)]+)\)|||COMMON.C_DATA(\1)
\$BIT\(([^)]+)\)|||COMMON.C_BIT(\1)
\$FNUMBER\(([^)]+)\)|||COMMON.C_FNUMBER(\1)
\$PIECE\(([^)]+)\)|||COMMON.C_PIECE(\1)
\$P\(([^)]+)\)|||COMMON.C_PIECE(\1)
\$FIND\(([^)]+)\)|||COMMON.C_FIND(\1)
\$NOW\(\)|||COMMON.C_NOW()
\$FACTOR\(([^)]+)\)|||COMMON.C_FACTOR(\1)
\$ZTIME\(([^)]+)\)|||COMMON.C_TIME(\1)
\$TLEVEL|||COMMON.C_TLEVEL
Write "([^"]*)", (\w+), !|||DBMS_OUTPUT.PUT_LINE('\1' || NVL(\2) || CHR(10));